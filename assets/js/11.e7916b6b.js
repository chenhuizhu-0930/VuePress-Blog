(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{366:function(s,n,a){"use strict";a.r(n);var e=a(14),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"三方合并的关键角色"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三方合并的关键角色"}},[s._v("#")]),s._v(" 三方合并的关键角色")]),s._v(" "),n("ol",[n("li",[n("strong",[s._v("BASE（基线版本）")]),s._v(" "),n("ul",[n("li",[s._v("这是 SVN 在你本地 "),n("code",[s._v(".svn")]),s._v(" 目录中存储的文件“参考版本”，通常是你上一次成功 "),n("code",[s._v("update")]),s._v(" 或 "),n("code",[s._v("commit")]),s._v(" 之后的状态。")]),s._v(" "),n("li",[s._v("它代表了“本地和远程共同拥有的、尚未分化之前”的那一个版本。")])])]),s._v(" "),n("li",[n("strong",[s._v("WORKING（工作副本当前版本）")]),s._v(" "),n("ul",[n("li",[s._v("这是你在本地对文件进行修改后的最新状态。与 BASE 相比，可能新增了一些变动，比如你在第 2 行和第 4 行写了新的内容。")])])]),s._v(" "),n("li",[n("strong",[s._v("INCOMING 或 REPO（远程版本/合并源版本）")]),s._v(" "),n("ul",[n("li",[s._v("这是从服务器上拉取的最新改动，或者是在分支合并时的另外一条分支修改。与 BASE 相比，可能也有不同之处，比如在第 5 行和第 8 行被他人修改了。")])])])]),s._v(" "),n("h2",{attrs:{id:"svn-如何进行自动合并"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#svn-如何进行自动合并"}},[s._v("#")]),s._v(" SVN 如何进行自动合并")]),s._v(" "),n("p",[s._v("当你执行 "),n("code",[s._v("svn update")]),s._v(" 或 "),n("code",[s._v("svn merge")]),s._v(" 时，如果"),n("strong",[s._v("不同人的修改并不冲突")]),s._v("（也就是修改发生在"),n("strong",[s._v("不同的行或互不干涉的代码块")]),s._v("），SVN 会按照以下步骤"),n("strong",[s._v("自动合并")]),s._v("：")]),s._v(" "),n("ol",[n("li",[n("strong",[s._v("比较 BASE 与 WORKING（本地差异）")]),s._v(" "),n("ul",[n("li",[s._v("SVN 会计算出你本地针对 BASE 做了哪些修改。比如：\n"),n("ul",[n("li",[s._v("在第 2 行和第 4 行有新增或修改。")])])]),s._v(" "),n("li",[s._v("这些改动可以被视为一个“差异集（diff）”。")])])]),s._v(" "),n("li",[n("strong",[s._v("比较 BASE 与 INCOMING（远程差异）")]),s._v(" "),n("ul",[n("li",[s._v("SVN 同样计算远程（或合并源）相对于同一个 BASE 做了哪些修改。比如：\n"),n("ul",[n("li",[s._v("在第 5 行和第 8 行有修改。")])])]),s._v(" "),n("li",[s._v("这也是一个“差异集”。")])])]),s._v(" "),n("li",[n("strong",[s._v("判断修改是否冲突")]),s._v(" "),n("ul",[n("li",[s._v("SVN 会检查：\n"),n("ul",[n("li",[s._v("你在 BASE 到 WORKING 的差异，是否与 BASE 到 INCOMING 的差异在同一行（或同一区段）出现不同的改动。")])])]),s._v(" "),n("li",[s._v("如果改动"),n("strong",[s._v("在不同的行")]),s._v("（例如本地改第 2、4 行，远程改第 5、8 行），或者虽然在同一文件但在不相互覆盖的区域（例如本地插入是第 3 行后，远程插入是第 7 行后），SVN 就能把它们“无缝”地合并在一起。")])])]),s._v(" "),n("li",[n("strong",[s._v("应用合并")]),s._v(" "),n("ul",[n("li",[s._v("先对 BASE 应用本地修改（得到一个过渡版本），再对其应用远程修改。")]),s._v(" "),n("li",[s._v("最终得到一个既包含你本地改动、又包含远程改动的"),n("strong",[s._v("合并后文件")]),s._v("。")])])]),s._v(" "),n("li",[n("strong",[s._v("更新本地基线（BASE）")]),s._v(" "),n("ul",[n("li",[s._v("当自动合并顺利完成后，你的工作副本文件会变成“合并后状态”，SVN 也会更新 "),n("code",[s._v(".svn")]),s._v(" 里的 BASE，表示本地现在基于这个新状态继续工作。")])])])]),s._v(" "),n("h3",{attrs:{id:"具体示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#具体示例"}},[s._v("#")]),s._v(" 具体示例")]),s._v(" "),n("p",[s._v("假设原始文件（BASE）有 10 行：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1: line1\n2: line2\n3: line3\n4: line4\n5: line5\n6: line6\n7: line7\n8: line8\n9: line9\n10: line10\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("本地（WORKING）：")]),s._v(" 修改了第 2 行和第 4 行。")]),s._v(" "),n("li",[n("strong",[s._v("远程（INCOMING）：")]),s._v(" 修改了第 5 行和第 8 行。")])]),s._v(" "),n("p",[s._v("三方合并时，SVN 发现第 2、4 行和第 5、8 行并不重叠（不同的行），所以就直接把两边的改动都合并进来，最后自动生成的文件在本地会是：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1: line1\n2: line2 (local changed)\n3: line3\n4: line4 (local changed)\n5: line5 (remote changed)\n6: line6\n7: line7\n8: line8 (remote changed)\n9: line9\n10: line10\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("还是上述文件，再比如：")]),s._v(" "),n("ul",[n("li",[s._v("**本地（WORKING）：**第3行后插入3行。")]),s._v(" "),n("li",[n("strong",[s._v("远程（INCOMING）：")]),s._v(" 第11行后插入2行。")])]),s._v(" "),n("p",[s._v("三方合并时，4～6 行是本地合并进来的；11～12 行是远程合并进来的。整体文件长度从 10 行变成了 15 行，同时保留了双方对各自行段的改动。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1: line1\n2: line2\n3: line3\n4: L1        <-- 本地新增\n5: L2        <-- 本地新增\n6: L3        <-- 本地新增\n7: line4\n8: line5\n9: line6\n10: line7\n11: R1       <-- 远程新增\n12: R2       <-- 远程新增\n13: line8\n14: line9\n15: line10\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("这个结果包含了"),n("strong",[s._v("全部")]),s._v("有效改动，且无冲突。")]),s._v(" "),n("h3",{attrs:{id:"项目上的实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目上的实例"}},[s._v("#")]),s._v(" 项目上的实例")]),s._v(" "),n("p",[s._v("之前我在update svn时项目文件里生成了如下标记，解释一下下面的标记")]),s._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("... &lt;-- 文件前面部分\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine        &lt;-- 冲突开始标记\n→ 本地修改代码 ←\n||||||| .r217\n→ 共同基线代码 ←\n=======              &lt;-- 分隔本地和远程修改的标记\n→ 远程版本r219的代码 ←\n>>>>>>> .r219        &lt;-- 冲突结束标记\n...  &lt;-- 文件剩下的正常部分（其他函数、字段、逻辑等）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"合并冲突"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合并冲突"}},[s._v("#")]),s._v(" 合并冲突")]),s._v(" "),n("h3",{attrs:{id:"冲突原因"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#冲突原因"}},[s._v("#")]),s._v(" 冲突原因")]),s._v(" "),n("p",[s._v("如果本地和远程都在"),n("strong",[s._v("相同的行")]),s._v("有修改，SVN 无法自动决定哪边才是正确的修改，才会出现"),n("strong",[s._v("冲突")]),s._v("（会生成 "),n("code",[s._v(".mine")]),s._v(", "),n("code",[s._v(".rXX")]),s._v(", "),n("code",[s._v(".rYY")]),s._v(" 文件等）。例如：")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("BASE（第 4 行）")]),s._v(": "),n("code",[s._v('System.out.println("Original Base");')])]),s._v(" "),n("li",[n("strong",[s._v("WORKING（第 4 行）")]),s._v(": "),n("code",[s._v('System.out.println("Local changes!");')])]),s._v(" "),n("li",[n("strong",[s._v("INCOMING（第 4 行）")]),s._v(": "),n("code",[s._v('System.out.println("Remote changes!");')])])]),s._v(" "),n("p",[s._v("因为第 4 行这处的修改“撞”到一起，SVN 就需要你手动选择保留哪个或者合并两者内容。")]),s._v(" "),n("h3",{attrs:{id:"suo文件的冲突"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#suo文件的冲突"}},[s._v("#")]),s._v(" .suo文件的冲突")]),s._v(" "),n("p",[s._v(".suo 文件（Solution User Options）是 Visual Studio 的用户级别设置文件，通常是二进制格式，根本不适合进行文本差异比对（用 Notepad++ 打开会显示乱码）。这类文件一般只在你本地存储个人或环境相关的配置信息，如断点、调试配置、IDE 窗口布局等，不应该提交到版本库里去。")]),s._v(" "),n("h4",{attrs:{id:"_1-为什么会出现冲突"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么会出现冲突"}},[s._v("#")]),s._v(" 1. 为什么会出现冲突？")]),s._v(" "),n("p",[s._v(".suo 文件是二进制且易变每次打开/关闭解决方案、调整调试设置或更改 IDE 布局等，.suo 文件都会更新。由于多人协同开发时每个人都有不同的 IDE 环境，.suo 很容易在版本库中反复产生冲突。\n文件实质内容无法文本合并\n因为 .suo 是二进制，SVN 或 Git 等版本控制系统没法直接对其做出有效的“文本合并”，只能粗暴地提示冲突。你在 Notepad++ 中看到的“乱码”正是二进制数据。")]),s._v(" "),n("h4",{attrs:{id:"_2-正确的做法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-正确的做法"}},[s._v("#")]),s._v(" 2. 正确的做法")]),s._v(" "),n("p",[s._v("将 .suo 文件移出版本控制\n通常我们会将这些用户/机器相关的配置文件（如 .suo、.user、*.userprefs 等）放到忽略列表（svn:ignore、.gitignore 等）里，防止它们被提交到远程仓库。\n如果当前版本库里已经有 .suo 文件，建议直接在 SVN 中执行删除 (svn delete)，并在 SVN 忽略列表中添加 *.suo，避免后续再被提交。 只保留 .sln / .csproj / .vbproj 等真正需要的项目文件\n.sln、.csproj、.vbproj 是项目/解决方案本身的配置信息，一般需要纳入版本管理（会影响实际编译构建）。 .suo、.user 这类仅与个人环境相关，不应入库。\n如果一定要处理冲突，若暂时无法删除 .suo，需要先解决当前冲突可以采用“保留任意一方”来强行解决，比如执行： svn resolve --accept mine-full <文件名> （保留本地版本） svn resolve --accept theirs-full <文件名> （保留远程版本） 。最终建议还是通过移除 .suo 来彻底杜绝后续冲突。")]),s._v(" "),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("自动合并原理")]),s._v("：只要本地和远程的修改没有在同一个代码片段/行发生冲突，SVN 就能将其并入同一个文件，形成“自动合并”。")]),s._v(" "),n("li",[n("strong",[s._v("为什么需要“三方合并”")]),s._v("：SVN 需要知道在你上一次成功同步（BASE）的基础上，本地和远程分别修改了哪些部分，以便判断他们是否冲突，或可直接拼合。")]),s._v(" "),n("li",[n("strong",[s._v("自动合并成功后")]),s._v("：你在本地会直接看到已经合并了双方改动的文件，无需手动处理冲突标记，也无需手动编辑 "),n("code",[s._v("<<<<<<<")]),s._v("、"),n("code",[s._v("=======")]),s._v("、"),n("code",[s._v(">>>>>>>")]),s._v(" 之类的冲突符号。")]),s._v(" "),n("li",[n("strong",[s._v(".suo")]),s._v(" 或者**.user**等文件仅与个人环境相关，不应纳入版本控制。")])]),s._v(" "),n("p",[s._v("当 SVN 显示“Auto-merging ...”或没有出现冲突提示时，你就可以放心地继续工作，并在需要时 "),n("code",[s._v("svn commit")]),s._v(" 将合并后的内容提交到远程仓库。")])])}),[],!1,null,null,null);n.default=t.exports}}]);