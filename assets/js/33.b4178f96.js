(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{387:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"_1-插件注册"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-插件注册"}},[t._v("#")]),t._v(" 1. 插件注册")]),t._v(" "),s("h4",{attrs:{id:"_1-1-事件管道执行阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-事件管道执行阶段"}},[t._v("#")]),t._v(" 1.1 事件管道执行阶段")]),t._v(" "),s("p",[t._v("在插件注册到 CRM 系统时，会设置它在哪个执行阶段（如预验证、预操作、后操作）触发，一旦设置完成，CRM 系统就会在相应阶段自动调用插件，代码里可以无需再次判断。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Pre - validation")]),t._v("：预验证阶段，在此阶段可对即将进行的操作进行合法性检查等")]),t._v(" "),s("li",[s("strong",[t._v("Pre - operation")]),t._v("：预操作阶段，在实际操作（如创建、更新实体）执行前触发")]),t._v(" "),s("li",[s("strong",[t._v("Post - operation")]),t._v("：后操作阶段，在操作完成后触发")])]),t._v(" "),s("h4",{attrs:{id:"_1-2-插件的step"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-插件的step"}},[t._v("#")]),t._v(" 1.2 插件的step")]),t._v(" "),s("ul",[s("li",[t._v("定义与作用\n"),s("ul",[s("li",[s("code",[t._v("Step")]),t._v("是插件中定义的一个执行单元，它规定了插件在特定事件（如创建、更新、删除实体等）发生时的具体执行逻辑和顺序。每个"),s("code",[t._v("Step")]),t._v("可以与不同的事件、实体以及消息相绑定，从而实现对不同业务场景的精确控制。通过配置不同的"),s("code",[t._v("Step")]),t._v("，开发人员可以灵活地定制插件在不同阶段和条件下的行为，以满足复杂的业务需求。")])])]),t._v(" "),s("li",[t._v("关键属性\n"),s("ul",[s("li",[s("strong",[t._v("事件")]),t._v("：指定"),s("code",[t._v("Step")]),t._v("所响应的 Dynamics 365 平台事件，如"),s("code",[t._v("Create")]),t._v("（创建实体时触发）、"),s("code",[t._v("Update")]),t._v("（更新实体时触发）、"),s("code",[t._v("Delete")]),t._v("（删除实体时触发）等。开发人员可以根据业务需求选择合适的事件来触发插件逻辑的执行。")]),t._v(" "),s("li",[s("strong",[t._v("消息")]),t._v("：与事件相关联，进一步细化插件触发的条件。例如，对于"),s("code",[t._v("Update")]),t._v("事件，可以通过消息指定具体是更新哪些字段时触发插件。常见的消息包括"),s("code",[t._v("SetState")]),t._v("（设置实体状态）、"),s("code",[t._v("Assign")]),t._v("（分配实体所有权）等。")]),t._v(" "),s("li",[s("strong",[t._v("实体")]),t._v("：明确"),s("code",[t._v("Step")]),t._v("所作用的 Dynamics 365 实体对象，如客户、订单、联系人等。插件可以针对特定实体进行数据操作和业务逻辑处理。")]),t._v(" "),s("li",[s("strong",[t._v("执行顺序")]),t._v("：定义了在多个"),s("code",[t._v("Step")]),t._v("存在的情况下，它们的执行先后顺序。通过设置执行顺序，可以确保插件逻辑按照预期的顺序依次执行，避免出现逻辑冲突或数据不一致的情况。")]),t._v(" "),s("li",[s("strong",[t._v("模式")]),t._v("：包括同步和异步两种模式。同步模式下，插件会在主业务流程中立即执行，直到插件执行完成，主流程才会继续；异步模式则是将插件的执行放入后台队列，不影响主业务流程的继续执行，适用于一些耗时较长的操作，以提高系统的响应性能和用户体验。")])])])]),t._v(" "),s("h3",{attrs:{id:"_2-插件执行判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-插件执行判断"}},[t._v("#")]),t._v(" 2. 插件执行判断")]),t._v(" "),s("h4",{attrs:{id:"_2-1-执行实体判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-执行实体判断"}},[t._v("#")]),t._v(" 2.1 执行实体判断")]),t._v(" "),s("p",[t._v("在 CS 文件中会有针对某一个或多个实体的判断逻辑，确保代码只在处理该实体相关操作时执行。")]),t._v(" "),s("div",{staticClass:"language-csharp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pluginContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LogicalName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ns_outsourcingbudget"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里编写针对ns_outsourcingbudget实体的特定处理代码")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如获取该实体特定属性值、根据属性值进行业务判断等")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"_2-2-消息类型判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-消息类型判断"}},[t._v("#")]),t._v(" 2.2 消息类型判断")]),t._v(" "),s("p",[t._v("在CS文件中，一般会有类似如下代码结构来响应创建、更新、删除等消息类型：")]),t._v(" "),s("div",{staticClass:"language-csharp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pluginContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetMessageType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" PluginContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MessageType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Create"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里放置针对创建操作的处理代码")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比如获取创建实体的相关属性、进行数据校验等操作")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"_3-插件开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-插件开发"}},[t._v("#")]),t._v(" 3. 插件开发")]),t._v(" "),s("h4",{attrs:{id:"_3-1-取得实体属性值并打log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-取得实体属性值并打log"}},[t._v("#")]),t._v(" 3.1 取得实体属性值并打log")]),t._v(" "),s("div",{staticClass:"language-csharp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Attributes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ContainsKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("PluginConsts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NS_WORKSTARTDATE_NM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    startdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns_workstartdate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    pluginContext"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("class_name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('":入力値より開始日取得＝"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("startdate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("HasValue "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")])]),t._v(" startdate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NULL"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"_3-2-pre-image"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-pre-image"}},[t._v("#")]),t._v(" 3.2 Pre-Image")]),t._v(" "),s("p",[t._v("在 Dynamics 365 插件开发中，预镜像（Pre - Image）是在实体发生特定操作（如更新、删除等）之前，系统为该实体创建的一个副本。它的目的是提供实体在操作前的状态信息，以便插件能够根据操作前的数据执行相应的逻辑。一般情况下，预镜像会包含实体的所有字段及其当时的值，这样插件可以全面地了解实体在操作前的完整状态。")]),t._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ab_outsourcing preImage = pluginContext.GetPreImage<ab_outsourcing>();\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h4",{attrs:{id:"_3-3-input"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-input"}},[t._v("#")]),t._v(" 3.3 Input")]),t._v(" "),s("div",{staticClass:"language-c# line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Entity entity = pluginContext.GetInputEntity<Entity>();\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h4",{attrs:{id:"_3-4-post-image"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-post-image"}},[t._v("#")]),t._v(" 3.4 Post-Image")]),t._v(" "),s("h3",{attrs:{id:"_4-插件的连锁启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-插件的连锁启动"}},[t._v("#")]),t._v(" 4. 插件的连锁启动")])])}),[],!1,null,null,null);s.default=e.exports}}]);